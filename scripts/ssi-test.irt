#
# Test cases for SSI.
#
#				Gershon Elber, Feb 1995
#
# In order to be able to appreciate the complexity of some of the test cases,
# it is suggested to view this file through IRIT with a display device that
# is able to render the surfaces shaded, such as xgldrvs.
#

Step = 0.01;
SubdivTol = 0.001;
NumericTol = 1e-8;
Euclidean = true;

TestInter = function( s1, s2 ): n:
    return = ssintr2( s1, s2, Step, SubdivTol, NumericTol, Euclidean ):
    if (sizeof( return ) == 2,
	n = ( sizeof( nth( return, 1 ) ) + sizeof( nth( return, 2 ) ) ) / 2,
	if (sizeof( return ) == 1,
	    n = sizeof( nth( return, 1 ) ) / 2,
	    n = 0 ) ):
    printf( "Found %d intersection connected components.\\n", list( n ) );
    
#
# 1. Simple close loop intersection. Both srfs are bi-quadratic polynomials.
#

s1 = sbezier( list( list( ctlpt( E3, 0.1, 0.0, 1.0 ),
                          ctlpt( E3, 0.3, 1.0, 0.5 ),
                          ctlpt( E3, 0.0, 2.0, 1.0 ) ),
                    list( ctlpt( E3, 1.1, 0.0, 0.5 ),
                          ctlpt( E3, 1.3, 1.0, 0.0 ),
                          ctlpt( E3, 1.0, 2.0, 0.5 ) ),
                    list( ctlpt( E3, 2.1, 0.0, 1.1 ),
                          ctlpt( E3, 2.3, 1.0, 0.4 ),
                          ctlpt( E3, 2.0, 2.0, 1.2 ) ) ) );
s2 = s1 * scale( vector( 1, 1, -1 ) ) * tz( 1.2 );
color( s1, red );
color( s2, green );

i = TestInter( s1, s2 );

All = list( s1, s2, i );
interact( All );

save( "ssi1", All );

#
# 2 and 3. Same as 1 but both surfaces are degree raised. How much does it
# slows down ssi computation!?
#

s1a = sraise( sraise( s1, ROW, 4 ), COL, 4 );
s2a = sraise( sraise( s2, ROW, 4 ), COL, 4 );
color( s1a, red );
color( s2a, green );

i = TestInter( s1a, s2a );

All = list( s1a, s2a, i );
interact( All );

save( "ssi2", All );

s1b = sraise( sraise( s1a, ROW, 5 ), COL, 5 );
s2b = sraise( sraise( s2a, ROW, 5 ), COL, 5 );
color( s1b, red );
color( s2b, green );

i = TestInter( s1b, s2b );

All = list( s1b, s2b, i );
interact( All );

save( "ssi3", All );

#
# 4. Two biquadratic polynomial Bspline surfaces. Intersection is open.
#

s1 = sbspline( 3, 3,
	       list( list( ctlpt( E3, 0.1, 0.0, 1.0 ),
                           ctlpt( E3, 0.3, 1.0, 0.5 ),
                           ctlpt( E3, 0.0, 2.0, 1.0 ) ),
                     list( ctlpt( E3, 1.1, 0.0, 0.5 ),
                           ctlpt( E3, 1.3, 1.0, 0.0 ),
                           ctlpt( E3, 1.0, 2.0, 0.5 ) ),
                     list( ctlpt( E3, 2.1, 0.0, 1.1 ),
                           ctlpt( E3, 2.3, 1.0, 0.4 ),
                           ctlpt( E3, 2.0, 2.0, 1.2 ) ),
                     list( ctlpt( E3, 3.1, 0.0, 1.9 ),
                           ctlpt( E3, 3.3, 1.1, 1.4 ),
                           ctlpt( E3, 3.0, 2.0, 1.9 ) ),
                     list( ctlpt( E3, 4.1, 0.0, 1.1 ),
                           ctlpt( E3, 4.3, 1.0,-0.4 ),
                           ctlpt( E3, 4.0, 2.2, 1.2 ) ) ),
	       list( list( KV_OPEN ),
		     list( KV_OPEN ) ) );
s2 = sbspline( 3, 3,
	       list( list( ctlpt( E3, 0.1, 0.0, 1.0 ),
                           ctlpt( E3, 0.3, 0.7, 0.5 ),
                           ctlpt( E3, 0.1, 1.2, 1.0 ),
                           ctlpt( E3, 0.0, 2.0, 0.5 ) ),
                     list( ctlpt( E3, 1.1, 0.0, 0.5 ),
                           ctlpt( E3, 1.3, 1.0, 0.0 ),
                           ctlpt( E3, 1.1, 1.3, 0.5 ),
                           ctlpt( E3, 1.0, 2.0, 0.5 ) ),
                     list( ctlpt( E3, 2.1, 0.0, 1.1 ),
                           ctlpt( E3, 2.3, 0.5, 0.4 ),
                           ctlpt( E3, 2.0, 1.0, 1.3 ),
                           ctlpt( E3, 2.0, 2.0, 0.4 ) ),
                     list( ctlpt( E3, 3.1, 0.0, 1.9 ),
                           ctlpt( E3, 3.3, 0.7, 1.4 ),
                           ctlpt( E3, 3.1, 1.1, 1.5 ),
                           ctlpt( E3, 3.1, 2.0, 1.9 ) ) ),
	       list( list( KV_OPEN ),
		     list( KV_OPEN ) ) ) *
	rotx( 90 ) * trans( vector( 1.5, 1.5, 0 ) );
color( s1, red );
color( s2, green );

i = TestInter( s1, s2 );

All = list( s1, s2,i );
interact( All );

save( "ssi4", All );

#
# 5. Two biquadratic rational surface intersection - a cone and a sphere.
#

s1 = coneSrf( 3.0, 0.7 );
s2 = sphereSrf( 0.8 ) * trans( vector( 0.35, 0.65, 1.3 ) );
color( s1, red );
color( s2, green );

i = TestInter( s1, s2 );

All = list( s1, s2, i );
interact( All );

save( "ssi5", All );

#
# 6. Same as 5, but the poles of the sphere are on the cone's surface.
#

s1 = coneSrf( 3.0, 0.7 );
s2 = sphereSrf( 0.8 ) * roty( -atan2( 0.7, 3.0 ) * 180 / Pi )
		      * trans( vector( 0.35, 0.0, 1.5 ) );
color( s1, red );
color( s2, green );

# i = TestInter( s1, s2 );  # This is slow!

All = list( s1, s2 );
interact( All );

save( "ssi6", All );

#
# 7. Four different and isolated intersection loops between two bicubic
# Bspline surfaces.
#

s1 = sbspline( 4, 4,
	       list( list( ctlpt( E3, 0.1, 0.0, 0.51 ),
                           ctlpt( E3, 0.4, 1.0, 0.52 ),
                           ctlpt( E3, 0.2, 2.2, 0.5 ),
                           ctlpt( E3, 0.4, 3.5, 0.49 ),
                           ctlpt( E3, 0.0, 4.3, 0.52 ) ),
                     list( ctlpt( E3, 1.1, 0.3, 0.53 ),
                           ctlpt( E3, 1.3, 1.3, 2.7 ),
                           ctlpt( E3, 1.1, 2.2,-1.4 ),
                           ctlpt( E3, 1.1, 3.3, 3.1 ),
                           ctlpt( E3, 1.2, 4.2, 0.48 ) ),
                     list( ctlpt( E3, 2.1, 0.1, 0.47 ),
                           ctlpt( E3, 2.4, 1.1, 0.52 ),
                           ctlpt( E3, 2.3, 2.0, 0.51 ),
                           ctlpt( E3, 2.4, 3.3, 0.52 ),
                           ctlpt( E3, 2.0, 4.0, 0.53 ) ),
                     list( ctlpt( E3, 3.1, 0.4, 0.49 ),
                           ctlpt( E3, 3.3, 1.3, 2.6 ),
                           ctlpt( E3, 2.9, 2.1,-1.9 ),
                           ctlpt( E3, 2.9, 3.5, 2.0 ),
                           ctlpt( E3, 3.0, 4.6, 0.51 ) ),
                     list( ctlpt( E3, 4.1, 0.1, 0.53 ),
                           ctlpt( E3, 4.0, 1.2, 0.45 ),
                           ctlpt( E3, 4.3, 2.0, 0.51 ),
                           ctlpt( E3, 3.9, 3.4, 0.55 ),
                           ctlpt( E3, 4.0, 4.2, 0.51 ) ) ),
	       list( list( KV_OPEN ),
		     list( KV_OPEN ) ) );
s2 = sbspline( 4, 4,
	       list( list( ctlpt( E3, 0.1, 0.0, 1.85 ),
                           ctlpt( E3, 0.4, 1.0, 1.9 ),
                           ctlpt( E3, 0.2, 2.2, 1.95 ),
                           ctlpt( E3, 0.4, 3.5, 1.7 ),
                           ctlpt( E3, 0.0, 4.3, 1.8 ) ),
                     list( ctlpt( E3, 1.1, 0.3, 1.88 ),
                           ctlpt( E3, 1.3, 1.3,-1.1 ),
                           ctlpt( E3, 1.1, 2.2, 2.85 ),
                           ctlpt( E3, 1.1, 3.3,-0.95 ),
                           ctlpt( E3, 1.2, 4.2, 1.7 ) ),
                     list( ctlpt( E3, 2.1, 0.1, 1.9 ),
                           ctlpt( E3, 2.4, 1.1, 1.8 ),
                           ctlpt( E3, 2.3, 2.0, 1.85 ),
                           ctlpt( E3, 2.4, 3.3, 1.65 ),
                           ctlpt( E3, 2.0, 4.0, 1.75 ) ),
                     list( ctlpt( E3, 3.1, 0.4, 1.85 ),
                           ctlpt( E3, 3.3, 1.3,-0.9 ),
                           ctlpt( E3, 2.9, 2.1, 2.4 ),
                           ctlpt( E3, 2.9, 3.5,-0.9 ),
                           Ctlpt( E3, 3.0, 4.6, 1.8 ) ),
                     list( ctlpt( E3, 4.1, 0.1, 1.85 ),
                           ctlpt( E3, 4.0, 1.2, 1.75 ),
                           ctlpt( E3, 4.3, 2.0, 1.65 ),
                           ctlpt( E3, 3.9, 3.4, 1.95 ),
                           ctlpt( E3, 4.0, 4.2, 1.85 ) ) ),
	       list( list( KV_OPEN ),
		     list( KV_OPEN ) ) );
color( s1, red );
color( s2, green );

i = TestInter( s1, s2 );

All = list( s1, s2, i );
interact( All );

save( "ssi7", All );


#
# 8, 9. Same as 7 but we scale the Z axis by 0.1 and by 0.01 to create almost
# tangent surfaces.
#

s1a = s1 * sz( 0.1 );
s2a = s2 * sz( 0.1 );
color( s1a, red );
color( s2a, green );

i = TestInter( s1a, s2a );

All = list( s1a, s2a, i );
interact( All );

save( "ssi8", All  );

s1b = s1 * sz( 0.01 );
s2b = s2 * sz( 0.01 );
color( s1b, red );
color( s2b, green );

i = TestInter( s1b, s2b );

All = list( s1b, s2b, i );
interact( All );

save( "ssi9", All  );

#
# 10-13. Two different intersection curves that are very close to each other.
# Intersection between two biquadratic Bezier saddle like surfaces.
# In the last example of this sequence, the surfaces are tangent at
# the center point, s1( 0.5, 0.5 ) = s2( 0.5, 0.5 ) ~= (1.175, 1.13, 1.49 )
#

s1 = sbezier( list( list( ctlpt( E3, 0.1, 0.0, 1.6 ),
                          ctlpt( E3, 0.3, 1.1, 0.4 ),
                          ctlpt( E3, 0.0, 2.2, 1.5 ) ),
                    list( ctlpt( E3, 1.1, 0.2, 3.0 ),
                          ctlpt( E3, 1.3, 1.0, 1.4 ),
                          ctlpt( E3, 1.0, 2.2, 2.7 ) ),
                    list( ctlpt( E3, 2.1, 0.1, 1.4 ),
                          ctlpt( E3, 2.3, 1.3, 0.2 ),
                          ctlpt( E3, 2.0, 2.2, 1.2 ) ) ) );
p = seval( s1, 0.5, 0.5 );

s2a = s1 * trans( -coerce( p, vector_type ) )
         * scale( vector( 1.2, 1.1, -0.5 ) )
         * rotz( 15 )
	 * trans( vector( coord( p, 1 ), coord( p, 2 ), coord( p, 3 ) + 0.1 ) );

color( s1, red );
color( s2a, green );

i = TestInter( s1, s2a );

All = list( s1, s2a, i );
interact( All );

save( "ssi10", All );

s2b = s1 * trans( -coerce( p, vector_type ) )
         * scale( vector( 1.2, 1.1, -0.5 ) )
         * rotz( 15 )
	 * trans( vector( coord( p, 1 ), coord( p, 2 ), coord( p, 3 ) + 0.01 ) );

color( s1, red );
color( s2b, green );

i = TestInter( s1, s2b );

All = list( s1, s2b, i );
interact( All );

save( "ssi11", All );

s2c = s1 * trans( -coerce( p, vector_type ) )
         * scale( vector( 1.2, 1.1, -0.5 ) )
         * rotz( 15 )
	 * trans( vector( coord( p, 1 ), coord( p, 2 ), coord( p, 3 ) + 0.001 ) );

color( s1, red );
color( s2c, green );

i = TestInter( s1, s2c );


All = list( s1, s2c, i );
interact( All );

save( "ssi12", All );

s2d = s1 * trans( -coerce( p, vector_type ) )
         * scale( vector( 1.2, 1.1, -0.5 ) )
         * rotz( 15 )
	 * trans( vector( coord( p, 1 ), coord( p, 2 ), coord( p, 3 ) ) );

color( s1, red );
color( s2d, green );

i = TestInter( s1, s2d );

All = list( s1, s2d, i );
interact( All );

save( "ssi13", All );

free( p );

#
# 14-16. Another case of almost tangency. Here we have a fairly flat surface
# and an elliptic surface almots tangent (first case), tangent at a point
# (second case) and intersects in a tiny loop (third case). Both happens at
# the centers of the surfaces
#     s1( 1.5, 1.0 ) ~= s2( 1.0, 1.5 ) ~= ( 2.28, 2.14, 0.48 )
# Both surfaces are cubic by quadratic Bspline surfaces.
#

s1 = sbspline( 3, 4,
	       list( list( ctlpt( E3, 0.1, 0.0, 0.3 ),
                           ctlpt( E3, 0.4, 1.0, 0.1 ),
                           ctlpt( E3, 0.2, 2.2, 0.5 ),
                           ctlpt( E3, 0.4, 3.5, 0.1 ),
                           ctlpt( E3, 0.0, 4.3, 0.2 ) ),
                     list( ctlpt( E3, 1.1, 0.3, 0.15 ),
                           ctlpt( E3, 1.3, 1.3, 0.3 ),
                           ctlpt( E3, 1.1, 2.2, 0.2 ),
                           ctlpt( E3, 1.1, 3.3, 0.25 ),
                           ctlpt( E3, 1.2, 4.2, 0.0 ) ),
                     list( ctlpt( E3, 2.1, 0.1, 0.4 ),
                           ctlpt( E3, 2.4, 1.1, 0.7 ),
                           ctlpt( E3, 2.3, 2.0, 0.35 ),
                           ctlpt( E3, 2.4, 3.3, 0.22 ),
                           ctlpt( E3, 2.0, 4.0, 0.35 ) ),
                     list( ctlpt( E3, 3.1, 0.4, 0.11 ),
                           ctlpt( E3, 3.3, 1.3, 0.1 ),
                           ctlpt( E3, 2.9, 2.1, 0.2 ),
                           ctlpt( E3, 2.9, 3.5, 0.3 ),
                           Ctlpt( E3, 3.0, 4.6, 0.3 ) ),
                     list( ctlpt( E3, 4.1, 0.1, 0.12 ),
                           ctlpt( E3, 4.0, 1.2, 0.05 ),
                           ctlpt( E3, 4.3, 2.0, 0.33 ),
                           ctlpt( E3, 3.9, 3.4, 0.13 ),
                           ctlpt( E3, 4.0, 4.2, 0.27 ) ) ),
	       list( list( KV_OPEN ),
		     list( KV_OPEN ) ) );
s2 = sbspline( 4, 3,
	       list( list( ctlpt( E3, 0.1, 0.0, 1.85 ),
                           ctlpt( E3, 0.4, 1.0, 1.9 ),
                           ctlpt( E3, 0.2, 2.2, 1.95 ),
                           ctlpt( E3, 0.4, 3.5, 1.7 ),
                           ctlpt( E3, 0.0, 4.3, 1.8 ) ),
                     list( ctlpt( E3, 1.1, 0.3, 1.88 ),
                           ctlpt( E3, 1.3, 1.3, 1.6 ),
                           ctlpt( E3, 1.1, 2.2, 0.7 ),
                           ctlpt( E3, 1.1, 3.3, 1.5 ),
                           ctlpt( E3, 1.2, 4.2, 1.7 ) ),
                     list( ctlpt( E3, 2.1, 0.1, 1.9 ),
                           ctlpt( E3, 2.4, 1.1, 0.5 ),
                           ctlpt( E3, 2.3, 2.0, 0.1 ),
                           ctlpt( E3, 2.4, 3.3, 0.5 ),
                           ctlpt( E3, 2.0, 4.0, 1.75 ) ),
                     list( ctlpt( E3, 3.1, 0.4, 1.85 ),
                           ctlpt( E3, 3.3, 1.3, 1.3 ),
                           ctlpt( E3, 2.9, 2.1, 0.5 ),
                           ctlpt( E3, 2.9, 3.5, 1.4 ),
                           Ctlpt( E3, 3.0, 4.6, 1.8 ) ),
                     list( ctlpt( E3, 4.1, 0.1, 1.85 ),
                           ctlpt( E3, 4.0, 1.2, 1.75 ),
                           ctlpt( E3, 4.3, 2.0, 1.65 ),
                           ctlpt( E3, 3.9, 3.4, 1.95 ),
                           ctlpt( E3, 4.0, 4.2, 1.85 ) ) ),
	       list( list( KV_OPEN ),
		     list( KV_OPEN ) ) );

#
# Compute a rotation matrix that rotates s2 so that its tangent plane at
# the sampled point is the same as the tangent plane of s1 their
#
nrml1 = normalize( coerce( seval( snrmlsrf( s1 ), 0.75, 0.3 ), vector_type ) );
tan1a = normalize( coerce( seval( sderive( s1, ROW ), 0.75, 0.3 ),
			   vector_type ) );
tan1b = tan1a ^ nrml1;
rot1 = homomat( list(
	list( coord( tan1a, 0 ), coord( tan1a, 1 ), coord( tan1a, 2 ), 0 ),
	list( coord( tan1b, 0 ), coord( tan1b, 1 ), coord( tan1b, 2 ), 0 ),
	list( coord( nrml1, 0 ), coord( nrml1, 1 ), coord( nrml1, 2 ), 0 ),
	list( 0, 0, 0, 1 ) ) );

free( tan1a );
free( tan1b );
free( nrml1 );

nrml2 = normalize( coerce( seval( snrmlsrf( s2 ), 0.5, 0.5 ), vector_type ) );
tan2a = normalize( coerce( seval( sderive( s2, ROW ), 0.5, 0.5 ),
			   vector_type ) );
tan2b = tan2a ^ nrml2;
rot2 = homomat( list(
	list( coord( tan2a, 0 ), coord( tan2a, 1 ), coord( tan2a, 2 ), 0 ),
	list( coord( tan2b, 0 ), coord( tan2b, 1 ), coord( tan2b, 2 ), 0 ),
	list( coord( nrml2, 0 ), coord( nrml2, 1 ), coord( nrml2, 2 ), 0 ),
	list( 0, 0, 0, 1 ) ) );

free( tan2a );
free( tan2b );
free( nrml2 );

RotMat = rot2^-1 * rot1;
free( rot1 );
free( rot2 );

#
# Apply the rotation matrix.
#
s2r = s2 * rotmat;
free( RotMat );

#
# Prove it: here are the normals of both surfaces at the sampled point.
#

pt1 = seval( s1, 0.75, 0.3 );
pt2 = seval( s2r, 0.5, 0.5 );

s2a = s2r * trans( vector( coord( pt1, 1 ) - coord( pt2, 1 ),
		           coord( pt1, 2 ) - coord( pt2, 2 ),
		           coord( pt1, 3 ) - coord( pt2, 3 ) + 0.01 ) );
color( s1, red );
color( s2a, green );

i = TestInter( s1, s2a ); # No intersection

All = list( s1, s2a,
	    normalize( coerce( seval( snrmlsrf( s1 ), 0.75, 0.3 ),
			       vector_type ) ),
	    normalize( coerce( seval( snrmlsrf( s2r ), 0.5, 0.5 ),
			       vector_type ) ) );
interact( All );

save( "ssi14", All );

s2b = s2r * trans( vector( coord( pt1, 1 ) - coord( pt2, 1 ),
		           coord( pt1, 2 ) - coord( pt2, 2 ),
		           coord( pt1, 3 ) - coord( pt2, 3 ) ) );
color( s1, red );
color( s2b, green );

i = TestInter( s1, s2b );

All = list( s1, s2b, i );
interact( All );

save( "ssi15", All );

s2c = s2r * trans( vector( coord( pt1, 1 ) - coord( pt2, 1 ),
		           coord( pt1, 2 ) - coord( pt2, 2 ),
		           coord( pt1, 3 ) - coord( pt2, 3 ) - 0.01 ) );
color( s1, red );
color( s2c, green );

i = TestInter( s1, s2c );

All = list( s1, s2c, i );
interact( All );

save( "ssi16", All );

free( s2r );
free( pt1 );
free( pt2 );

#
# 17. A complex but single intersection curve. This is between two quadratic
# Bspline surfaces.
# 

s1 = sbspline( 3, 3,
	       list( list( ctlpt( E3, 0.1, 0.0, 0.51 ),
                           ctlpt( E3, 0.4, 1.0, 0.52 ),
                           ctlpt( E3, 0.2, 2.2, 0.5 ),
                           ctlpt( E3, 0.4, 3.5, 0.49 ),
                           ctlpt( E3, 0.0, 4.3, 0.52 ) ),
                     list( ctlpt( E3, 1.1, 0.3, 0.53 ),
                           ctlpt( E3, 1.3, 1.3, 1.7 ),
                           ctlpt( E3, 1.1, 2.2,-0.4 ),
                           ctlpt( E3, 1.1, 3.3, 1.1 ),
                           ctlpt( E3, 1.2, 4.2, 0.48 ) ),
                     list( ctlpt( E3, 2.1, 0.1, 0.47 ),
                           ctlpt( E3, 2.4, 1.1, 1.52 ),
                           ctlpt( E3, 2.3, 2.0, 0.51 ),
                           ctlpt( E3, 2.4, 3.3, 1.52 ),
                           ctlpt( E3, 2.0, 4.0, 0.53 ) ),
                     list( ctlpt( E3, 3.1, 0.4, 0.49 ),
                           ctlpt( E3, 3.3, 1.3, 1.6 ),
                           ctlpt( E3, 2.9, 2.1,-0.9 ),
                           ctlpt( E3, 2.9, 3.5, 1.0 ),
                           ctlpt( E3, 3.0, 4.6, 0.51 ) ),
                     list( ctlpt( E3, 4.1, 0.1, 0.53 ),
                           ctlpt( E3, 4.0, 1.2, 0.45 ),
                           ctlpt( E3, 4.3, 2.0, 0.51 ),
                           ctlpt( E3, 3.9, 3.4, 0.55 ),
                           ctlpt( E3, 4.0, 4.2, 0.51 ) ) ),
	       list( list( KV_OPEN ),
		     list( KV_OPEN ) ) );

s2 = sbspline( 3, 3,
	       list( list( ctlpt( E3, 0.1, 0.0, 1.45 ),
                           ctlpt( E3, 0.4, 1.0, 1.5 ),
                           ctlpt( E3, 0.2, 2.2, 1.55 ),
                           ctlpt( E3, 0.4, 3.5, 1.3 ),
                           ctlpt( E3, 0.0, 4.3, 1.4 ) ),
                     list( ctlpt( E3, 1.1, 0.3, 1.48 ),
                           ctlpt( E3, 1.3, 1.3,-0.5 ),
                           ctlpt( E3, 1.1, 2.2, 1.45 ),
                           ctlpt( E3, 1.1, 3.3,-0.5 ),
                           ctlpt( E3, 1.2, 4.2, 1.3 ) ),
                     list( ctlpt( E3, 2.1, 0.1, 2.5 ),
                           ctlpt( E3, 2.4, 1.1, 2.4 ),
                           ctlpt( E3, 2.3, 2.0, 0.1 ),
                           ctlpt( E3, 2.4, 3.3, 2.4 ),
                           ctlpt( E3, 2.0, 4.0, 2.25 ) ),
                     list( ctlpt( E3, 3.1, 0.4, 1.45 ),
                           ctlpt( E3, 3.3, 1.3,-0.5 ),
                           ctlpt( E3, 2.9, 2.1, 1.0 ),
                           ctlpt( E3, 2.9, 3.5,-0.3 ),
                           Ctlpt( E3, 3.0, 4.6, 1.4 ) ),
                     list( ctlpt( E3, 4.1, 0.1, 1.45 ),
                           ctlpt( E3, 4.0, 1.2, 1.35 ),
                           ctlpt( E3, 4.3, 2.0, 1.25 ),
                           ctlpt( E3, 3.9, 3.4, 1.55 ),
                           ctlpt( E3, 4.0, 4.2, 1.45 ) ) ),
	       list( list( KV_OPEN ),
		     list( KV_OPEN ) ) ) * tz( -0.26 );
color( s1, red );
color( s2, green );

i = TestInter( s1, s2 );

All = list( s1, s2, i );

interact( All );

save( "ssi17", All );

#
# 18. Simple plane intersection (a test with an E2 surface).
# 

s1 = planeSrf( 0, 0, 4, 4 );
s2 = s2 * tz( -0.7 );
color( s1, red );
color( s2, green );

i = TestInter( s1, s2 );

All = list( s1, s2, i );

interact( All );

save( "ssi18", All );

#
# 19. This is between two quadratic Bspline surfaces.
# 

s1 = sphereSrf( 1 ) * sc( 0.9 ) * sx( .5 );
s2 = sphereSrf( 1 ) * sc( 0.8 ) * sy( .5 );

color( s1, red );
color( s2, green );

i = TestInter( s1, s2 );

All = list( s1, s2, i );

interact( All );

save( "ssi19", All );

#
# 20. Two bi-quadratic surfaces with one intersecting curve and one point of
# inter.
#
S1 = RuledSrf(
    ctlpt( E3, 0., 1., 1. ) + ctlpt( E3, 1., 1., -1. ),
    ctlpt( E3, 0., 0., -1. ) + ctlpt( E3, 1., 0., 1. ) );

S2 = RuledSrf(
    ctlpt( E3, 0., 1., 1. ) + ctlpt( E2, 1., 1. ),
    ctlpt( E1, 0. ) + ctlpt( E1, 1. ) );

color( s1, red );
color( s2, green );

i = TestInter( s1, s2 );

All = list( s1, s2, i );
interact( All );

save( "ssi20", All );

#
# 21. Two bi-quadratic surfaces with two points of intersections.
#
S1 = RuledSrf(
    ctlpt( E3, 0., 1., 1. ) + ctlpt( E3, 1., 1., 1. ),
    ctlpt( E3, 0., 0., 1. ) + ctlpt( E3, 1., 0., 1. ) );

S2 = RuledSrf(
    ctlpt( E3, 0.2, 0.8, 1. ) + ctlpt( E3, 1., 1., 1.2 ),
    ctlpt( E3, 0., 0., 1.2 ) + ctlpt( E3, 1., 0., 1. ) );

color( s1, red );
color( s2, green );

i = TestInter( s1, s2 );

All = list( s1, s2, i );
interact( All );

save( "ssi21", All );

#
# 22. Two bi-quadratic surfaces with one point of intersections.
#
S1 = RuledSrf(
    ctlpt( E3, 0., 1., 1. ) + ctlpt( E3, 1., 1., 1. ),
    ctlpt( E1, 0. ) + ctlpt( E1, 1. ) );

S2 = RuledSrf(
    ctlpt( E3, 0., 1., 1. ) + ctlpt( E3, 1., 1., 1.02 ),
    ctlpt( E3, 0., 0., 2. ) + ctlpt( E3, 1., 0., 2. ) );

color( s1, red );
color( s2, green );

i = TestInter( s1, s2 );

All = list( s1, s2, i );
interact( All );

save( "ssi22", All );

#
# 23. Two bi-quadratic surfaces with shared intersecting boundary.
#
S1 = RuledSrf(
    ctlpt( E3, 0., 1., 1. ) + ctlpt( E3, 1., 1., 1. ),
    ctlpt( E1, 0. ) + ctlpt( E1, 1. ) );

S2 = RuledSrf(
    ctlpt( E3, 0., 1., 1. ) + ctlpt( E3, 1., 1., 1. ),
    ctlpt( E3, 0., 0., 2. ) + ctlpt( E3, 1., 0., 2. ) );
attrib(S2, "color", 2);

color( s1, red );
color( s2, green );

i = TestInter( s1, s2 );

All = list( s1, s2, i );
interact( All );

save( "ssi23", All );

#
# 24. Open intersection curve starts and ends inside one surface.
#
s1 = sbspline( 3, 3,
	           list( list( ctlpt( E3, 1, 1, 0 ),
                           ctlpt( E3, 1, 1, 1 ),
                           ctlpt( E3, 1, 1, 2 ) ),
                     list( ctlpt( E3, 2, 1.5, 0 ),
                           ctlpt( E3, 2, -1.5, 1 ),
                           ctlpt( E3, 2, 1.5, 2 ) ),
                     list( ctlpt( E3, 3, 1, 0 ),
                           ctlpt( E3, 3, 1, 1 ),
                           ctlpt( E3, 3, 1, 2 ) ) ),
					list( list( KV_OPEN ),
					list( KV_OPEN ) ) );
		     
		     
s2 = sbspline( 3, 3,
	           list( list( ctlpt( E3, 0, 0, 1 ),
                           ctlpt( E3, 0, 1, 1 ),
                           ctlpt( E3, 0, 2, 1 ) ),
                     list( ctlpt( E3, 1, 0, 1.5 ),
                           ctlpt( E3, 1, 1, 1.5 ),
                           ctlpt( E3, 1, 2, 1.5 ) ),
                     list( ctlpt( E3, 2, 0, 0.5 ),
                           ctlpt( E3, 2, 1, 0.5 ),
                           ctlpt( E3, 2, 2, 0.5 ) ),
                     list( ctlpt( E3, 3, 0, 1 ),
                           ctlpt( E3, 3, 1, 1 ),
                           ctlpt( E3, 3, 2, 1 ) ),       
                     list( ctlpt( E3, 4, 0, 1 ),
                           ctlpt( E3, 4, 1, 1 ),
                           ctlpt( E3, 4, 2, 1 ) ) ),
					list( list( KV_OPEN ),
					list( KV_OPEN ) ) );

color( s1, red );
color( s2, green );

i = TestInter( s1, s2 );

All = list( s1, s2, i );
interact( All );

save( "ssi24", All );


    
#
# 25. paraboloid vs. plane, 1 loop 
#
s1 = sbezier( list( list( ctlpt( E3, 0, 0, 0),
                          ctlpt( E3, 0, 1, 0) ),
                    list( ctlpt( E3, 1, 0, 0),
                          ctlpt( E3, 1, 1, 0) ) ) );

s2 = sbezier( list( list( ctlpt( E3, 0, 0, 1 ),
                          ctlpt( E3, 0, 0.5, 0 ),
                          ctlpt( E3, 0, 1, 1 ) ),
                    list( ctlpt( E3, 0.5, 0, 0 ),
                          ctlpt( E3, 0.5, 0.5, -1.5 ),
                          ctlpt( E3, 0.5, 1, 0) ),
                    list( ctlpt( E3, 1, 0, 1 ),
                          ctlpt( E3, 1, 0.5, 0 ),
                          ctlpt( E3, 1, 1, 1 ) ) ) );

color( s1, red );
color( s2, green );

i = TestInter( s1, s2 );

All = list( s1, s2, i );
interact( All );

save( "ssi25", All );   

#
# 26. same as the previous example but with tangent plane
#
s1 = sbezier( list( list( ctlpt( E3, 0, 0, 0),
                          ctlpt( E3, 0, 1, 0) ),
                    list( ctlpt( E3, 1, 0, 0),
                          ctlpt( E3, 1, 1, 0) ) ) );
		     
s2 = sbezier( list( list( ctlpt( E3, 0, 0, 1 ),
                          ctlpt( E3, 0, 0.5, 0 ),
                          ctlpt( E3, 0, 1, 1 ) ),
                    list( ctlpt( E3, 0.5, 0, 0 ),
                          ctlpt( E3, 0.5, 0.5, -1 ),
                          ctlpt( E3, 0.5, 1, 0) ),
                    list( ctlpt( E3, 1, 0, 1 ),
                          ctlpt( E3, 1, 0.5, 0 ),
                          ctlpt( E3, 1, 1, 1 ) ) ) );

color( s1, red );
color( s2, green );

i = TestInter( s1, s2 );

All = list( s1, s2, i );
interact( All );

save( "ssi26", All );    

#
# 27. Almost similar surfaces (almost tangential contact).
#
s1 = sbezier(
        list( list( ctlpt( E3, 0, 0, 0 ),
                    ctlpt( E3, 0.05, 0.2, 0.1 ),
                    ctlpt( E3, 0.1, 0.05, 0.2 ) ),
              list( ctlpt( E3, 0.1, -0.2, 0 ),
                    ctlpt( E3, 0.15, 0.05, 0.1 ),
                    ctlpt( E3, 0.2, -0.1, 0.2 ) ),
              list( ctlpt( E3, 0.2, 0, 0 ),
                    ctlpt( E3, 0.25, 0.2, 0.1 ),
                    ctlpt( E3, 0.3, 0.05, 0.2 ) ) ) ) * sc( 4 ) * sy( 0.3 );

s2 = s1 * rx( 2 ) * rz( 1 );

color( s1, red );
color( s2, blue );

i = TestInter( s1, s2 );

All = list( s1, s2, i );
interact( All );

save( "ssi27", All );   

#
# 28. Almost similar surfaces (almost tangential contact).
#
s1 = sbspline( 3, 3, 
        list( list( ctlpt( E3, 0.013501, 0.46333, -1.01136 ),
                    ctlpt( E3, 0.410664, -0.462427, -0.939545 ),
                    ctlpt( E3, 0.699477, 0.071974, -0.381915 ) ),
              list( ctlpt( E3, -0.201925, 1.15706, -0.345263 ),
                    ctlpt( E3, 0.210717, 0.022708, -0.34285 ),
                    ctlpt( E3, 0.49953, 0.557109, 0.21478 ) ),
              list( ctlpt( E3, -0.293521, 0.182036, -0.234382 ),
                    ctlpt( E3, 0.103642, -0.743721, -0.162567 ),
                    ctlpt( E3, 0.392455, -0.20932, 0.395063 ) ),
              list( ctlpt( E3, -0.508947, 0.875765, 0.431715 ),
                    ctlpt( E3, -0.096305, -0.258586, 0.434128 ),
                    ctlpt( E3, 0.192508, 0.275815, 0.991758 ) ),
              list( ctlpt( E3, -0.600543, -0.099258, 0.542596 ),
                    ctlpt( E3, -0.20338, -1.02502, 0.614411 ),
                    ctlpt( E3, 0.085433, -0.490614, 1.17204 ) ) ),
        list( list( kv_open ),
              list( kv_open ) ) );

s2 = s1 * rx( 18 ) * rz( 8 );

color( s1, blue );
color( s2, red );

i = TestInter( s1, s2 );

All = list( s1, s2, i );
interact( All );

save( "ssi28", All );  

#############################################################################

free( i );
free( All );
free( s1 );
free( s2 );
free( s1a );
free( s1b );
free( s2a );
free( s2b );
free( s2c );
free( s2d );

free( Step );
free( SubdivTol );
free( NumericTol );
free( Euclidean );
