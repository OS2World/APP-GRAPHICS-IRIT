#
# Curvature analysis by parameterizing control points.
#
#					Gershon Elber, July 2006
#

save_mat = view_mat;
save_res = resolution;
view_mat = rx( 0 );
viewobj( view_mat );

# Menu handling code
#
# Construct a menu geometry with MenuItems as entries on the XY plane
# between (MinX, MinY) and (MaxX, MaxY)
#

MenuGenGeometry = function( MenuItems, ItemSize, MinX, MinY, MaxX, MaxY ):
					x1: y1: x2: y2: i: n:
    n = sizeof( MenuItems ):
    return = nil():
    for ( i = 0, 1, n - 1,
	x1 = MinX:
	x2 = MaxX:
	y1 = MinY + ( MaxY - MinY ) * i / n:
	y2 = y1 + ( MaxY - MinY ) * 0.8 / n:
	snoc( list( poly( list( point( x1, y1, 0 ),
			    point( x1, y2, 0 ),
			    point( x2, y2, 0 ),
			    point( x2, y1, 0 ),
			    point( x1, y1, 0 ) ), true ),
		    textgeom( nth( MenuItems, i + 1 ),
			      vector( ItemSize * 0.034, 0, 0 ),
			      ItemSize * 0.06 )
			* trans( vector( x1 + ItemSize * 0.07,
					 ( y1 + y2 ) / 2, 0 ) ) ),
	      return ) );

#
# Test if the given (x, y) location is inside the given menu of n entires.
#

MenuGetSelection = function( x, y, n, MinX, MinY, MaxX, MaxY ):
					x1: y1: x2: y2: i:
    return = 0:
    for ( i = 0, 1, n - 1,
	x1 = MinX:
	x2 = MaxX:
	y1 = MinY + ( MaxY - MinY ) * i / n:
	y2 = y1 + ( MaxY - MinY ) * 0.8 / n:
	if ( x > x1 && x < x2 && y > y1 && y < y2,
	     return = i + 1 ) );

#############################################################################

UpdateClosestCtlPt = function( Crv, Pos ): n: i: Pt: MinDist: MinIndex:
    n = sizeof( Crv ):
    MinDist = 1e6:
    return = MinIndex = 0:
    for ( i = 0, 1, n - 1,
	Pt = coerce( coord( Crv, i ), point_type ):
	if ( dstPtPt( Pt, Pos ) < MinDist,
	    MinDist = dstPtPt( Pt, Pos ):
	    MinIndex = i ) ):
    return = cEditPt( Crv, coerce( coerce( Pos, ctlpt_type ), e2 ), MinIndex );

MarchCubeCrvtrFunc = function( MV, Size ): MS: MC:
    MS = ffmsize( MV ):
    MC = MrchCube( list( coerce( MV, trivar_type ), 1, 10, True ),
	  point( 1, 1, 1 ), 1, 0 ) * scale( vector( 1 / nth( MS, 1 ),
						    1 / nth( MS, 2 ),
						    1 / nth( MS, 3 ) ) ):
    return = MC * rz( -90 ) * rx( -90 )
		* tx( -0.5 ) * ty( -0.5 ) * sc( Size * 2 )
		* sz( 0.1 ) * tz( -1 ):
    color( return, red );

#
# Do some direct curve editing.  Uses Button 1 (left button).
#

XYPlane = plane( 0, 0, 1, 0 );
Menu = MenuGenGeometry( list( "Quit", "Ctl Mesh" ),
			0.7, 0.5, 0.75, 0.95, 0.95 );
color( Menu, white );

ManipulateCtlPt = procedure( Crv, Idx, OtherData, Menu ):
    Quit: c: XYPos: MenuIndex: CrsrKeep: CPt:

    # Ask all clients to send mouse/cursor events to the server.
    # Ask the server to keep mouse/cursor events to be read view ClntCrsr.
    ClntPickCrsr( clients_all ):
    CrsrKeep = IritState( "CursorKeep", 1 ):

    view( list( OtherData, Menu ), 1 ):

    Quit = 0:
    while ( Quit == 0,
        resolution = 4:
	CPt = sphere( coerce( coord( Crv, Idx ), vector_type ), 0.03 ):
	resolution = save_res:
	color( CPt, yellow ):

	color( Crv, cyan ):
	adwidth( Crv, 2 ):

        viewobj( Crv ):
        viewobj( CPt ):
	c = clntcrsr( 60000 ):	
	if ( sizeof( c ) == 0,
	    printf( "Time out in input (one minute wait)\\n", nil() ):
	    Quit = 1, 
	    XYPos = PtLnPln( nth( c, 1 ), nth( c, 2 ), XYPlane ):
	    # Handle only button 1 events:
	    if ( GetAttr( nth( c, 1 ), "EventType" ) == 2,
	        MenuIndex = MenuGetSelection( coord( XYPos, 0 ),
					      coord( XYPos, 1 ),
					      sizeof( Menu ),
				              0.5, 0.75, 0.95, 0.95 ):
	        if ( MenuIndex == 1,
		    Quit = 1,
		    if ( MenuIndex == 2,
		        viewstate( "DSrfMesh", -1 ),
		        Crv = UpdateClosestCtlPt( Crv, XYPos ) ) ) ):
	    if ( GetAttr( nth( c, 1 ), "EventType" ) == 1,
	        Crv = UpdateClosestCtlPt( Crv, XYPos ) ) ) ):

    #
    # Recover from pick cursor events.
    #
    ClntPickDone( clients_all ):
    CrsrKeep = IritState( "CursorKeep", CrsrKeep );

#############################################################################

LstPts2Polys = function( LPts ): i: Test:
    return = nil():
    if ( sizeof( LPts ) != 0,
	Test = nth( Lpts, 1 ):
	if ( thisobj( "Test" ) == list_type,
	    for ( i = 1, 1, sizeof( LPts ),
	        snoc( poly( nth( LPts, i ), true ),
	              return ) ),
	    return = poly( Lpts, true ) ) );

Max =  1;
Min = -Max;

Sq = poly( list( point( Min, Min, 0 ),
	         point( Min, Max, 0 ),
	         point( Max, Max, 0 ),
	         point( Max, Min, 0 ),
	         point( Min, Min, 0 ) ), false );

#############################################################################

Crv = cbezier( list( ctlpt( E2, -1, -1 ),
		     ctlpt( E2,  0.1,  2 ),
		     ctlpt( E2,  1,    2 ),
		     ctlpt( E2,  2,  -1 ) ) ) * sc( 0.3 );
Crv = coerce( Crv, E2 );

MV = ccrvtr1pt( Crv, 1, Min, Max, 0.01, 1e-10, 1 );
MC = MarchCubeCrvtrFunc( MV, Max );
ManipulateCtlPt( Crv, 1, list( MC ), Menu );

#############################################################################

Crv = cbezier( list( ctlpt( E2, -1, -1 ),
		     ctlpt( E2,  0.1,  2 ),
		     ctlpt( E2,  1,   -1 ),
		     ctlpt( E2,  2,   2 ) ) ) * sc( 0.25 );
Crv = coerce( Crv, E2 );

MV = ccrvtr1pt( Crv, 1, Min, Max, 0.01, 1e-10, 1 );
MC = MarchCubeCrvtrFunc( MV, Max );
ManipulateCtlPt( Crv, 1, list( MC ), Menu );

MV = ccrvtr1pt( Crv, 0, Min, Max, 0.01, 1e-10, 1 );
MC = MarchCubeCrvtrFunc( MV, Max );
ManipulateCtlPt( Crv, 0, list( MC ), Menu );

#############################################################################

Crv = cbezier( list( ctlpt( E2, -0.4472, -0.01124 ),
	             ctlpt( E2, -0.002247, -0.4562 ),
	             ctlpt( E2, 0.1236, 0.6944 ),
	             ctlpt( E2, 0.209, -0.4652 ),
	             ctlpt( E2, 0.3888, 0.2494 ) ) );
Crv = coerce( Crv, E2 );

MV = ccrvtr1pt( Crv, 2, Min, Max, 0.01, 1e-10, 1 );
MC = MarchCubeCrvtrFunc( MV, Max );
ManipulateCtlPt( Crv, 2, list( MC ), Menu );

MV = ccrvtr1pt( Crv, 1, Min, Max, 0.01, 1e-10, 1 );
MC = MarchCubeCrvtrFunc( MV, Max );
ManipulateCtlPt( Crv, 1, list( MC ), Menu );

MV = ccrvtr1pt( Crv, 4, Min, Max, 0.01, 1e-10, 1 );
MC = MarchCubeCrvtrFunc( MV, Max );
ManipulateCtlPt( Crv, 4, list( MC ), Menu );

#############################################################################

free( Crv );
free( MV );
free( MC );
free( Sq );
free( Min );
free( Max );
free( Menu );
free( XYPlane );

resolution = save_res;
view_mat = save_mat;
